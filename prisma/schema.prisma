generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model book {
  book_id           Int             @id @default(autoincrement())
  book_name         String?         @db.VarChar(255)
  number_of_chapter Int?
  book_description  String?         @db.Text
  number_of_likes   Int?
  book_category     book_category[]
  comment           comment[]
  favorite          favorite[]
  history           history[]
}

model book_category {
  id          Int       @id @default(autoincrement())
  book_id     Int?
  category_id Int?
  book        book?     @relation(fields: [book_id], references: [book_id], onDelete: NoAction, onUpdate: NoAction, map: "book_category_ibfk_1")
  category    category? @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "book_category_ibfk_2")

  @@index([book_id], map: "book_id")
  @@index([category_id], map: "category_id")
}

model category {
  category_id   Int             @id @default(autoincrement())
  category_name String?         @db.VarChar(255)
  book_category book_category[]
}

model comment {
  id      Int     @id @default(autoincrement())
  user_id Int?
  book_id Int?
  content String? @db.Text
  user    user?   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "comment_ibfk_1")
  book    book?   @relation(fields: [book_id], references: [book_id], onDelete: NoAction, onUpdate: NoAction, map: "comment_ibfk_2")

  @@index([book_id], map: "book_id")
  @@index([user_id], map: "user_id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model favorite {
  id      Int   @id @default(autoincrement())
  user_id Int?
  book_id Int?
  user    user? @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "favorite_ibfk_1")
  book    book? @relation(fields: [book_id], references: [book_id], onDelete: NoAction, onUpdate: NoAction, map: "favorite_ibfk_2")

  @@index([book_id], map: "book_id")
  @@index([user_id], map: "user_id")
}

model history {
  id             Int       @id @default(autoincrement())
  user_id        Int?
  book_id        Int?
  start_date     DateTime? @db.Timestamp(0)
  last_read_page Int?
  status         String?   @db.VarChar(255)
  user           user?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "history_ibfk_1")
  book           book?     @relation(fields: [book_id], references: [book_id], onDelete: NoAction, onUpdate: NoAction, map: "history_ibfk_2")

  @@index([book_id], map: "book_id")
  @@index([user_id], map: "user_id")
}

model user {
  user_id  Int        @id @default(autoincrement())
  username String     @unique(map: "username") @db.VarChar(255)
  password String     @db.VarChar(255)
  uid      String?    @db.VarChar(255)
  imgurl   String?    @db.VarChar(255)
  comment  comment[]
  favorite favorite[]
  history  history[]
}
